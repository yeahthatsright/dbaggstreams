/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.adamfalcone.avro;

import com.fasterxml.jackson.annotation.JsonCreator;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AssociateSalesCount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -554207720241332142L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AssociateSalesCount\",\"namespace\":\"com.adamfalcone.avro\",\"fields\":[{\"name\":\"sales_person\",\"type\":\"string\"},{\"name\":\"total_sales\",\"type\":\"string\",\"default\":\"0.00\"},{\"name\":\"transaction_count\",\"type\":\"int\"},{\"name\":\"average_sale\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AssociateSalesCount> ENCODER =
      new BinaryMessageEncoder<AssociateSalesCount>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AssociateSalesCount> DECODER =
      new BinaryMessageDecoder<AssociateSalesCount>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AssociateSalesCount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AssociateSalesCount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AssociateSalesCount>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AssociateSalesCount to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AssociateSalesCount from a ByteBuffer. */
  public static AssociateSalesCount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence sales_person;
  @Deprecated public java.lang.CharSequence total_sales;
  @Deprecated public int transaction_count;
  @Deprecated public java.lang.CharSequence average_sale;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AssociateSalesCount() {}

  /**
   * All-args constructor.
   * @param sales_person The new value for sales_person
   * @param total_sales The new value for total_sales
   * @param transaction_count The new value for transaction_count
   * @param average_sale The new value for average_sale
   */
  public AssociateSalesCount(java.lang.CharSequence sales_person, java.lang.CharSequence total_sales, java.lang.Integer transaction_count, java.lang.CharSequence average_sale) {
    this.sales_person = sales_person;
    this.total_sales = total_sales;
    this.transaction_count = transaction_count;
    this.average_sale = average_sale;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sales_person;
    case 1: return total_sales;
    case 2: return transaction_count;
    case 3: return average_sale;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sales_person = (java.lang.CharSequence)value$; break;
    case 1: total_sales = (java.lang.CharSequence)value$; break;
    case 2: transaction_count = (java.lang.Integer)value$; break;
    case 3: average_sale = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sales_person' field.
   * @return The value of the 'sales_person' field.
   */
  public java.lang.CharSequence getSalesPerson() {
    return sales_person;
  }

  /**
   * Sets the value of the 'sales_person' field.
   * @param value the value to set.
   */
  public void setSalesPerson(java.lang.CharSequence value) {
    this.sales_person = value;
  }

  /**
   * Gets the value of the 'total_sales' field.
   * @return The value of the 'total_sales' field.
   */
  public java.lang.CharSequence getTotalSales() {
    return total_sales;
  }

  /**
   * Sets the value of the 'total_sales' field.
   * @param value the value to set.
   */
  public void setTotalSales(java.lang.CharSequence value) {
    this.total_sales = value;
  }

  /**
   * Gets the value of the 'transaction_count' field.
   * @return The value of the 'transaction_count' field.
   */
  public java.lang.Integer getTransactionCount() {
    return transaction_count;
  }

  /**
   * Sets the value of the 'transaction_count' field.
   * @param value the value to set.
   */
  public void setTransactionCount(java.lang.Integer value) {
    this.transaction_count = value;
  }

  /**
   * Gets the value of the 'average_sale' field.
   * @return The value of the 'average_sale' field.
   */
  public java.lang.CharSequence getAverageSale() {
    return average_sale;
  }

  /**
   * Sets the value of the 'average_sale' field.
   * @param value the value to set.
   */
  public void setAverageSale(java.lang.CharSequence value) {
    this.average_sale = value;
  }

  /**
   * Creates a new AssociateSalesCount RecordBuilder.
   * @return A new AssociateSalesCount RecordBuilder
   */
  public static com.adamfalcone.avro.AssociateSalesCount.Builder newBuilder() {
    return new com.adamfalcone.avro.AssociateSalesCount.Builder();
  }

  /**
   * Creates a new AssociateSalesCount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AssociateSalesCount RecordBuilder
   */
  public static com.adamfalcone.avro.AssociateSalesCount.Builder newBuilder(com.adamfalcone.avro.AssociateSalesCount.Builder other) {
    return new com.adamfalcone.avro.AssociateSalesCount.Builder(other);
  }

  /**
   * Creates a new AssociateSalesCount RecordBuilder by copying an existing AssociateSalesCount instance.
   * @param other The existing instance to copy.
   * @return A new AssociateSalesCount RecordBuilder
   */
  public static com.adamfalcone.avro.AssociateSalesCount.Builder newBuilder(com.adamfalcone.avro.AssociateSalesCount other) {
    return new com.adamfalcone.avro.AssociateSalesCount.Builder(other);
  }

  /**
   * RecordBuilder for AssociateSalesCount instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AssociateSalesCount>
    implements org.apache.avro.data.RecordBuilder<AssociateSalesCount> {

    private java.lang.CharSequence sales_person;
    private java.lang.CharSequence total_sales;
    private int transaction_count;
    private java.lang.CharSequence average_sale;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.adamfalcone.avro.AssociateSalesCount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sales_person)) {
        this.sales_person = data().deepCopy(fields()[0].schema(), other.sales_person);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total_sales)) {
        this.total_sales = data().deepCopy(fields()[1].schema(), other.total_sales);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transaction_count)) {
        this.transaction_count = data().deepCopy(fields()[2].schema(), other.transaction_count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.average_sale)) {
        this.average_sale = data().deepCopy(fields()[3].schema(), other.average_sale);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AssociateSalesCount instance
     * @param other The existing instance to copy.
     */
    private Builder(com.adamfalcone.avro.AssociateSalesCount other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sales_person)) {
        this.sales_person = data().deepCopy(fields()[0].schema(), other.sales_person);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total_sales)) {
        this.total_sales = data().deepCopy(fields()[1].schema(), other.total_sales);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transaction_count)) {
        this.transaction_count = data().deepCopy(fields()[2].schema(), other.transaction_count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.average_sale)) {
        this.average_sale = data().deepCopy(fields()[3].schema(), other.average_sale);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'sales_person' field.
      * @return The value.
      */
    public java.lang.CharSequence getSalesPerson() {
      return sales_person;
    }

    /**
      * Sets the value of the 'sales_person' field.
      * @param value The value of 'sales_person'.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesCount.Builder setSalesPerson(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sales_person = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sales_person' field has been set.
      * @return True if the 'sales_person' field has been set, false otherwise.
      */
    public boolean hasSalesPerson() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sales_person' field.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesCount.Builder clearSalesPerson() {
      sales_person = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_sales' field.
      * @return The value.
      */
    public java.lang.CharSequence getTotalSales() {
      return total_sales;
    }

    /**
      * Sets the value of the 'total_sales' field.
      * @param value The value of 'total_sales'.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesCount.Builder setTotalSales(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.total_sales = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'total_sales' field has been set.
      * @return True if the 'total_sales' field has been set, false otherwise.
      */
    public boolean hasTotalSales() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'total_sales' field.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesCount.Builder clearTotalSales() {
      total_sales = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_count' field.
      * @return The value.
      */
    public java.lang.Integer getTransactionCount() {
      return transaction_count;
    }

    /**
      * Sets the value of the 'transaction_count' field.
      * @param value The value of 'transaction_count'.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesCount.Builder setTransactionCount(int value) {
      validate(fields()[2], value);
      this.transaction_count = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_count' field has been set.
      * @return True if the 'transaction_count' field has been set, false otherwise.
      */
    public boolean hasTransactionCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transaction_count' field.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesCount.Builder clearTransactionCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'average_sale' field.
      * @return The value.
      */
    public java.lang.CharSequence getAverageSale() {
      return average_sale;
    }

    /**
      * Sets the value of the 'average_sale' field.
      * @param value The value of 'average_sale'.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesCount.Builder setAverageSale(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.average_sale = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'average_sale' field has been set.
      * @return True if the 'average_sale' field has been set, false otherwise.
      */
    public boolean hasAverageSale() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'average_sale' field.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesCount.Builder clearAverageSale() {
      average_sale = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AssociateSalesCount build() {
      try {
        AssociateSalesCount record = new AssociateSalesCount();
        record.sales_person = fieldSetFlags()[0] ? this.sales_person : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.total_sales = fieldSetFlags()[1] ? this.total_sales : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.transaction_count = fieldSetFlags()[2] ? this.transaction_count : (java.lang.Integer) defaultValue(fields()[2]);
        record.average_sale = fieldSetFlags()[3] ? this.average_sale : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AssociateSalesCount>
    WRITER$ = (org.apache.avro.io.DatumWriter<AssociateSalesCount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AssociateSalesCount>
    READER$ = (org.apache.avro.io.DatumReader<AssociateSalesCount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

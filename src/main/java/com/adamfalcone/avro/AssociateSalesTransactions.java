/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.adamfalcone.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AssociateSalesTransactions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7859647204381330661L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AssociateSalesTransactions\",\"namespace\":\"com.adamfalcone.avro\",\"fields\":[{\"name\":\"sales_person\",\"type\":\"string\"},{\"name\":\"transaction_count\",\"type\":\"int\"},{\"name\":\"transactions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SalesTransactionSummary\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"sales_person\",\"type\":\"string\"},{\"name\":\"first_name\",\"type\":\"string\"},{\"name\":\"last_name\",\"type\":\"string\"},{\"name\":\"total_sale\",\"type\":{\"type\":\"bytes\",\"scale\":2,\"precision\":64,\"connect.version\":1,\"connect.parameters\":{\"scale\":\"2\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"transaction_date\",\"type\":{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AssociateSalesTransactions> ENCODER =
      new BinaryMessageEncoder<AssociateSalesTransactions>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AssociateSalesTransactions> DECODER =
      new BinaryMessageDecoder<AssociateSalesTransactions>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AssociateSalesTransactions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AssociateSalesTransactions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AssociateSalesTransactions>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AssociateSalesTransactions to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AssociateSalesTransactions from a ByteBuffer. */
  public static AssociateSalesTransactions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence sales_person;
  @Deprecated public int transaction_count;
  @Deprecated public java.util.List<com.adamfalcone.avro.SalesTransactionSummary> transactions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AssociateSalesTransactions() {}

  /**
   * All-args constructor.
   * @param sales_person The new value for sales_person
   * @param transaction_count The new value for transaction_count
   * @param transactions The new value for transactions
   */
  public AssociateSalesTransactions(java.lang.CharSequence sales_person, java.lang.Integer transaction_count, java.util.List<com.adamfalcone.avro.SalesTransactionSummary> transactions) {
    this.sales_person = sales_person;
    this.transaction_count = transaction_count;
    this.transactions = transactions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sales_person;
    case 1: return transaction_count;
    case 2: return transactions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sales_person = (java.lang.CharSequence)value$; break;
    case 1: transaction_count = (java.lang.Integer)value$; break;
    case 2: transactions = (java.util.List<com.adamfalcone.avro.SalesTransactionSummary>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sales_person' field.
   * @return The value of the 'sales_person' field.
   */
  public java.lang.CharSequence getSalesPerson() {
    return sales_person;
  }

  /**
   * Sets the value of the 'sales_person' field.
   * @param value the value to set.
   */
  public void setSalesPerson(java.lang.CharSequence value) {
    this.sales_person = value;
  }

  /**
   * Gets the value of the 'transaction_count' field.
   * @return The value of the 'transaction_count' field.
   */
  public java.lang.Integer getTransactionCount() {
    return transaction_count;
  }

  /**
   * Sets the value of the 'transaction_count' field.
   * @param value the value to set.
   */
  public void setTransactionCount(java.lang.Integer value) {
    this.transaction_count = value;
  }

  /**
   * Gets the value of the 'transactions' field.
   * @return The value of the 'transactions' field.
   */
  public java.util.List<com.adamfalcone.avro.SalesTransactionSummary> getTransactions() {
    return transactions;
  }

  /**
   * Sets the value of the 'transactions' field.
   * @param value the value to set.
   */
  public void setTransactions(java.util.List<com.adamfalcone.avro.SalesTransactionSummary> value) {
    this.transactions = value;
  }

  /**
   * Creates a new AssociateSalesTransactions RecordBuilder.
   * @return A new AssociateSalesTransactions RecordBuilder
   */
  public static com.adamfalcone.avro.AssociateSalesTransactions.Builder newBuilder() {
    return new com.adamfalcone.avro.AssociateSalesTransactions.Builder();
  }

  /**
   * Creates a new AssociateSalesTransactions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AssociateSalesTransactions RecordBuilder
   */
  public static com.adamfalcone.avro.AssociateSalesTransactions.Builder newBuilder(com.adamfalcone.avro.AssociateSalesTransactions.Builder other) {
    return new com.adamfalcone.avro.AssociateSalesTransactions.Builder(other);
  }

  /**
   * Creates a new AssociateSalesTransactions RecordBuilder by copying an existing AssociateSalesTransactions instance.
   * @param other The existing instance to copy.
   * @return A new AssociateSalesTransactions RecordBuilder
   */
  public static com.adamfalcone.avro.AssociateSalesTransactions.Builder newBuilder(com.adamfalcone.avro.AssociateSalesTransactions other) {
    return new com.adamfalcone.avro.AssociateSalesTransactions.Builder(other);
  }

  /**
   * RecordBuilder for AssociateSalesTransactions instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AssociateSalesTransactions>
    implements org.apache.avro.data.RecordBuilder<AssociateSalesTransactions> {

    private java.lang.CharSequence sales_person;
    private int transaction_count;
    private java.util.List<com.adamfalcone.avro.SalesTransactionSummary> transactions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.adamfalcone.avro.AssociateSalesTransactions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sales_person)) {
        this.sales_person = data().deepCopy(fields()[0].schema(), other.sales_person);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transaction_count)) {
        this.transaction_count = data().deepCopy(fields()[1].schema(), other.transaction_count);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactions)) {
        this.transactions = data().deepCopy(fields()[2].schema(), other.transactions);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AssociateSalesTransactions instance
     * @param other The existing instance to copy.
     */
    private Builder(com.adamfalcone.avro.AssociateSalesTransactions other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sales_person)) {
        this.sales_person = data().deepCopy(fields()[0].schema(), other.sales_person);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transaction_count)) {
        this.transaction_count = data().deepCopy(fields()[1].schema(), other.transaction_count);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactions)) {
        this.transactions = data().deepCopy(fields()[2].schema(), other.transactions);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'sales_person' field.
      * @return The value.
      */
    public java.lang.CharSequence getSalesPerson() {
      return sales_person;
    }

    /**
      * Sets the value of the 'sales_person' field.
      * @param value The value of 'sales_person'.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesTransactions.Builder setSalesPerson(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sales_person = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sales_person' field has been set.
      * @return True if the 'sales_person' field has been set, false otherwise.
      */
    public boolean hasSalesPerson() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sales_person' field.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesTransactions.Builder clearSalesPerson() {
      sales_person = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_count' field.
      * @return The value.
      */
    public java.lang.Integer getTransactionCount() {
      return transaction_count;
    }

    /**
      * Sets the value of the 'transaction_count' field.
      * @param value The value of 'transaction_count'.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesTransactions.Builder setTransactionCount(int value) {
      validate(fields()[1], value);
      this.transaction_count = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_count' field has been set.
      * @return True if the 'transaction_count' field has been set, false otherwise.
      */
    public boolean hasTransactionCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transaction_count' field.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesTransactions.Builder clearTransactionCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactions' field.
      * @return The value.
      */
    public java.util.List<com.adamfalcone.avro.SalesTransactionSummary> getTransactions() {
      return transactions;
    }

    /**
      * Sets the value of the 'transactions' field.
      * @param value The value of 'transactions'.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesTransactions.Builder setTransactions(java.util.List<com.adamfalcone.avro.SalesTransactionSummary> value) {
      validate(fields()[2], value);
      this.transactions = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactions' field has been set.
      * @return True if the 'transactions' field has been set, false otherwise.
      */
    public boolean hasTransactions() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transactions' field.
      * @return This builder.
      */
    public com.adamfalcone.avro.AssociateSalesTransactions.Builder clearTransactions() {
      transactions = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AssociateSalesTransactions build() {
      try {
        AssociateSalesTransactions record = new AssociateSalesTransactions();
        record.sales_person = fieldSetFlags()[0] ? this.sales_person : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.transaction_count = fieldSetFlags()[1] ? this.transaction_count : (java.lang.Integer) defaultValue(fields()[1]);
        record.transactions = fieldSetFlags()[2] ? this.transactions : (java.util.List<com.adamfalcone.avro.SalesTransactionSummary>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AssociateSalesTransactions>
    WRITER$ = (org.apache.avro.io.DatumWriter<AssociateSalesTransactions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AssociateSalesTransactions>
    READER$ = (org.apache.avro.io.DatumReader<AssociateSalesTransactions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
